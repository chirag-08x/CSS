/* 
Just like grid-column and grid-row we can also use grid-template-area to set up our layout. We can give a name to a particular
area in the grid container, and then we can decide which element will span accross that named area. First we have to set up the
grid names for every element column and row, and then we can assign area names for every grid-item. While naming grid column and
rows make sure to have same number of column and rows. for example in the example below we have 3 column and 5 rows, so we should
have 3 cols and 5rows while naming them. Grid areas are just an alternative approach for setting layout using grid-rows and 
grid-column.
*/

.container{
    display: grid;
    grid-template-columns: 1fr 1fr 1fr ;
    grid-template-rows: 1fr 1fr 1fr 1fr 1fr;
    grid-template-areas: 
    "a a b"
    "a a b"
    "c c b"
    "d d d"
    "e f f"
}

.cell-1{
    grid-area: a;
}

.cell-2{
    grid-area: b;
}

.cell-3{
    grid-area: c;
}

.cell-4{
    grid-area: d;
}

.cell-5{
    grid-area: e;
}

.cell-6{
    grid-area: f;
}

*{
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body{
    font-family: Verdana, Geneva, Tahoma, sans-serif;
    color: #222;
}

.container{
    border: 5px solid black;
}

.cell{
    padding: 2rem;
    background: #dedede;
    text-transform: uppercase;
    border: 3px solid red;
    color: #fff;
    text-align: center;
    font-weight: bold;
}

.cell-1{
    background: #581f18;
}
.cell-2{
    background: #f0a202;
}
.cell-3{
    background: #d95d39;
}
.cell-4{
    background: #202c59;
}
.cell-5{
    background: #51cb20;
}